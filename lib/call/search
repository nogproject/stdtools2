#!/bin/bash

arg_regex="$1"
projects="$2"
projectPaths="$3"

status() {
    if egrep -q <<<"$1" '.*/_[a-zA-Z0-9_-]+__[0-9]{4}-[0-9]{2}-[0-9]{2}-g[0-9a-f]+$'; then
        printf 'repopacked'
        return
    fi

    (
        cd "$1"
        local files="README.md index.md version.inc.md"
        if git grep -q '^THIS.*RETIRED' master -- ${files} 2>/dev/null; then
            printf 'retired'
        elif git grep -q '^THIS.*FROZEN' master -- ${files} 2>/dev/null; then
            printf 'frozen'
        elif git grep -q '^THIS.*DEPRECATED' master -- ${files} 2>/dev/null; then
            printf 'deprecated'
        else
            printf 'active'
        fi

        if git grep -q 'filter=lfs' master -- .gitattributes 2>/dev/null; then
            printf ',lfsattrs'
        elif [ -e "$(git rev-parse --git-path lfs)" ]; then
            printf ',lfsstore'
        fi

        if git grep -q 'filter=silo' master -- .gitattributes 2>/dev/null; then
            printf ',siloattrs'
        elif [ -e "$(git rev-parse --git-path silo)" ]; then
            printf ',silostore'
        fi
    )
}

# Strategy for find expression:
#
# - Use `-maxdepth` but not `-mindepth`, so that prune detects if higher
#   directories are not readable.
# - Use find instead of glob to select find roots to avoid problems with
#   missing roots.
# - Explicitly `-print` if the regex matches.
# - Use a default `-false` to suppress printing unless there is an explicit
#   `-print`.  The approach ensures, for example, that unreadable symlinks are
#   not printed, since `-prune` would let them pass as true.

# Run all finds in a big subshell, whose output is piped to `sort` at the very.
(
cd "${projects}"

# repos with gitdirs by year, different naming schemes 2013, 2014..15, 2016.. .
find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/2013$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2- \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[^/]+/[0-9]{4}/[0-9]{4}(-[0-9]{2})?_[a-zA-Z0-9-]*/.git$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project year name _ <<<"${relpath}"
    IFS=_ read date shortname <<<"${name}"
    printf '%s_%s_%s %s/%s\n' "${date}" "${project}" "${shortname}" "${projects}" "${relpath%/.git}"
done

find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/(2014|2015)$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2- \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[^/]+/[0-9]{4}/([0-9]{2}_)?[a-zA-Z0-9-]*/.git$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project year name _ <<<"${relpath}"
    if [ "${name:2:1}" = '_' ]; then
        IFS=_ read month shortname <<<"${name}"
        printf '%s-%s_%s_%s' "${year}" "${month}" "${project}" "${shortname}"
    else
        printf '%s_%s_%s' "${year}" "${project}" "${name}"
    fi
    printf ' %s/%s\n' "${projects}" "${relpath%/.git}"
done

find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/(2016|2017|2018|2019)$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2- \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[^/]+/[0-9]{4}/[a-zA-Z0-9-]+(_[0-9]{2})?/.git$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project year name _ <<<"${relpath}"
    case ${name} in
    *_*)
        IFS=_ read shortname month <<<"${name}"
        printf '%s_%s_%s-%s' "${project}" "${shortname}" "${year}" "${month}"
        ;;
    *)
        printf '%s_%s_%s' "${project}" "${name}" "${year}"
        ;;
    esac
    printf ' %s/%s\n' "${projects}" "${relpath%/.git}"
done

# timeless
find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/[.]git$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2 \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type f \
            -regextype posix-egrep \
            -regex '^[^/]+/[a-zA-Z][a-zA-Z0-9-]*/.toolsconfig$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project name _ <<<"${relpath}"
    printf '%s_%s' "${project}" "${name}"
    printf ' %s/%s\n' "${projects}" "${relpath%/.toolsconfig}"
done

# repopacked, different naming schemes 2013, 2014..15, 2016.. .
find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/2013$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2- \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 1 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[^/]+/[0-9]{4}/_[a-zA-Z0-9_-]+__[0-9]{4}-[0-9]{2}-[0-9]{2}-g[0-9a-f]+$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project year name _ <<<"${relpath}"
    IFS=_ read _ data shortname _ <<<"${name}"
    printf '%s_%s_%s-%s' "${date}" "${project}" "${shortname}"
    printf ' %s/%s\n' "${projects}" "${relpath}"
done

find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/(2014|2015)$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2- \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 1 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[^/]+/[0-9]{4}/_[a-zA-Z0-9_-]+__[0-9]{4}-[0-9]{2}-[0-9]{2}-g[0-9a-f]+$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project year name _ <<<"${relpath}"
    case ${name} in
    _*_*__*)
        IFS=_ read _ month shortname _ <<<"${name}"
        printf '%s-%s_%s_%s-%s' "${year}" "${month}" "${project}" "${shortname}"
        ;;
    _*__*)
        IFS=_ read _ shortname _ <<<"${name}"
        printf '%s_%s_%s' "${year}" "${project}" "${shortname}"
        ;;
    esac
    printf ' %s/%s\n' "${projects}" "${relpath}"
done

find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/(2016|2017|2018|2019)$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2- \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 1 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[^/]+/[0-9]{4}/_[a-zA-Z0-9_-]+__[0-9]{4}-[0-9]{2}-[0-9]{2}-g[0-9a-f]+$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project year name _ <<<"${relpath}"
    case ${name} in
    _*_*__*)
        IFS=_ read _ shortname month _ <<<"${name}"
        printf '%s_%s_%s-%s' "${project}" "${shortname}" "${year}" "${month}"
        ;;
    _*__*)
        IFS=_ read _ shortname _ <<<"${name}"
        printf '%s_%s_%s' "${project}" "${shortname}" "${year}"
        ;;
    esac
    printf ' %s/%s\n' "${projects}" "${relpath}"
done

# timeless repopacks
find . \
    -maxdepth 2 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[.]/[^/]*/[.]git$' \
            -print \
        ')' \
    ')' \
    -false \
| cut -d / -f 2 \
| tr '\n' '\0' \
| xargs -0 --no-run-if-empty -I{} find {} \
    -maxdepth 1 \
    '(' \
        '(' ! -readable -prune ')' -or \
        '(' \
            -type d \
            -regextype posix-egrep \
            -regex '^[^/]+/_[a-zA-Z0-9_-]+__[0-9]{4}-[0-9]{2}-[0-9]{2}-g[0-9a-f]+$' \
            -print \
        ')' \
    ')' \
    -false \
| while read -r relpath; do
    IFS=/ read -r project repopack _ <<<"${relpath}"
    IFS=_ read _ shortname _ <<<"${repopack}"
    printf '%s_%s' "${project}" "${shortname}"
    printf ' %s/%s\n' "${projects}" "${relpath}"
done

# custom projects
# repos with gitdirs by year, naming schemes 2014..15, 2016.. .
printf '%s\n' "${projectPaths}" \
| while read -r project root; do
    cd "${root}"

    find . \
        -maxdepth 1 \
        '(' \
            '(' ! -readable -prune ')' -or \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[.]/(2014|2015)$' \
                -print \
            ')' \
        ')' \
        -false \
    | cut -d / -f 2- \
    | tr '\n' '\0' \
    | xargs -0 --no-run-if-empty -I{} find {} \
        -maxdepth 2 \
        '(' \
            '(' ! -readable -prune ')' -or \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[0-9]{4}/([0-9]{2}_)?[a-zA-Z0-9-]*/.git$' \
                -print \
            ')' \
        ')' \
        -false \
    | while read -r relpath; do
        IFS=/ read -r year name _ <<<"${relpath}"
        if [ "${name:2:1}" = '_' ]; then
            IFS=_ read month shortname <<<"${name}"
            printf '%s-%s_%s_%s' "${year}" "${month}" "${project}" "${shortname}"
        else
            printf '%s_%s_%s' "${year}" "${project}" "${name}"
        fi
        printf ' %s/%s\n' "${root}" "${relpath%/.git}"
    done

    find . \
        -maxdepth 1 \
        '(' \
            '(' ! -readable -prune ')' -or \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[.]/(2016|2017|2018|2019)$' \
                -print \
            ')' \
        ')' \
        -false \
    | cut -d / -f 2- \
    | tr '\n' '\0' \
    | xargs -0 --no-run-if-empty -I{} find {} \
        -maxdepth 2 \
        '(' \
            '(' ! -readable -prune ')' -o \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[0-9]{4}/[a-zA-Z0-9-]+(_[0-9]{2})?/.git$' \
                -print \
            ')' \
        ')' \
        -false \
    | while read -r relpath; do
        IFS=/ read -r year name _ <<<"${relpath}"
        case ${name} in
        *_*)
            IFS=_ read shortname month <<<"${name}"
            printf '%s_%s_%s-%s' "${project}" "${shortname}" "${year}" "${month}"
            ;;
        *)
            printf '%s_%s_%s' "${project}" "${name}" "${year}"
            ;;
        esac
        printf ' %s/%s\n' "${root}" "${relpath%/.git}"
    done

    # repopacked, naming schemes 2014..15, 2016.. .
    find . \
        -maxdepth 1 \
        '(' \
            '(' ! -readable -prune ')' -or \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[.]/(2014|2015)$' \
                -print \
            ')' \
        ')' \
        -false \
    | cut -d / -f 2- \
    | tr '\n' '\0' \
    | xargs -0 --no-run-if-empty -I{} find {} \
        -maxdepth 1 \
        '(' \
            '(' ! -readable -prune ')' -o \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[0-9]{4}/_[a-zA-Z0-9_-]+__[0-9]{4}-[0-9]{2}-[0-9]{2}-g[0-9a-f]+$' \
                -print \
            ')' \
        ')' \
        -false \
    | while read -r relpath; do
        IFS=/ read -r year name _ <<<"${relpath}"
        case ${name} in
        _*_*__*)
            IFS=_ read _ month shortname _ <<<"${name}"
            printf '%s-%s_%s_%s-%s' "${year}" "${month}" "${project}" "${shortname}"
            ;;
        _*__*)
            IFS=_ read _ shortname _ <<<"${name}"
            printf '%s_%s_%s' "${year}" "${project}" "${shortname}"
            ;;
        esac
        printf ' %s/%s\n' "${root}" "${relpath}"
    done

    find . \
        -maxdepth 1 \
        '(' \
            '(' ! -readable -prune ')' -or \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[.]/(2016|2017|2018|2019)$' \
                -print \
            ')' \
        ')' \
        -false \
    | cut -d / -f 2- \
    | tr '\n' '\0' \
    | xargs -0 --no-run-if-empty -I{} find {} \
        -maxdepth 1 \
        '(' \
            '(' ! -readable -prune ')' -o \
            '(' \
                -type d \
                -regextype posix-egrep \
                -regex '^[0-9]{4}/_[a-zA-Z0-9_-]+__[0-9]{4}-[0-9]{2}-[0-9]{2}-g[0-9a-f]+$' \
                -print \
            ')' \
        ')' \
        -false \
    | while read -r relpath; do
        IFS=/ read -r year name _ <<<"${relpath}"
        case ${name} in
        _*_*__*)
            IFS=_ read _ shortname month _ <<<"${name}"
            printf '%s_%s_%s-%s' "${project}" "${shortname}" "${year}" "${month}"
            ;;
        _*__*)
            IFS=_ read _ shortname _ <<<"${name}"
            printf '%s_%s_%s' "${project}" "${shortname}" "${year}"
            ;;
        esac
        printf ' %s/%s\n' "${root}" "${relpath}"
    done
done

) \
| sort \
| ( egrep -i --color=never "${arg_regex}" || true ) \
| while read -r name path; do
    printf '%s %s %s\n' "${name}" $(status "${path}") "${path}"
done \
| column -t

exit ${cfg_exit_ok}
